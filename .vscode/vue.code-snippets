{
  "🛠️ vue-hooks": {
    "prefix": "vue-hooks",
    "body": [
      "import { MaybeRef, MaybeComputedRef } from '@vueuse/core'",
      "",
      "export interface Options {",
      "  /**",
      "   * some desc",
      "   * ",
      "   * @default 1",
      "   */",
      "  test?: number",
      "}",
      "",
      "export const useUmHooks = (",
      "  foo: MaybeRef<number>,",
      "  bar: MaybeComputedRef<number>,",
      "  options?: Options",
      ") => {",
      "  const { test = 1 } = options ?? {}",
      "",
      "  return {",
      "    foo,",
      "    bar,",
      "    test",
      "  }",
      "}",
      ""
    ],
    "description": "vue3组合式api模板"
  },
  "📑 doc-only": {
    "prefix": "vue-doc-only",
    "body": [
      "<template>",
      "  <!-- api 查看： https://histoire.dev/reference/vue3/story.html -->",
      "  <!-- BUG 不明原因：开启`docOnly`模式后以及使用`<docs src=\"path/to/foo.md\"></docs>`，如果不设置`id`会报找不到文件 -->",
      "  <Story id=\"${RELATIVE_FILEPATH}\" docsOnly title=\"# $1\" icon=\"fluent-emoji:bookmark-tabs\" />",
      "</template>",
      "",
      "<docs lang=\"md\" src=\"$2\"></docs>",
      ""
    ],
    "description": "Histoire文档-纯文档，推荐通过引入markdown文件的方法来使用"
  },
  "📑 doc-dynamic": {
    "prefix": "vue-doc-dynamic",
    "body": [
      "<!-- 交互式文档 -- 使用 `<Story>` 和 `<Variant>` 组件来写交互 -->",
      "<script lang=\"ts\" setup>",
      "// TODO",
      "const text = ref('foo')",
      "</script>",
      "",
      "",
      "<template>",
      "  <!-- https://histoire.dev/reference/vue3/story.html -->",
      "  <Story id=\"${RELATIVE_FILEPATH/\\/|\\./_/ig}\" title=\"${TM_DIRECTORY/(.*\\/)(.*)/$2/}\" icon=\"${1|fluent-emoji:ice,fluent-emoji:hammer-and-wrench,fluent-emoji:pineapple|}\">",
      "    <AButton>Hellow World {{text}}</AButton>",
      "",
      "    <!-- https://histoire.dev/reference/vue3/variant.html -->",
      "    <Variant title=\"next\">",
      "      <AButton>Hellow World</AButton>",
      "    </Variant>",
      "",
      "    <template #controls>",
      "      <HstText v-model=\"text\" title=\"文本内容\"/>",
      "    </template>",
      "  </Story>",
      "</template>",
      "",
      "<!-- <style lang=\"scss\" scoped></style> -->",
      "",
      "<docs lang=\"md\"></docs>",
      ""
    ],
    "description": "Histoire文档-交互式文档，也可以通过引入markdown文件的方法来编写文档"
  },
  "🧊 vue3 auto named": {
    "prefix": "vue-setup-name",
    "body": [
      "<script lang=\"ts\" setup>",
      "",
      "</script>",
      "",
      "<script lang=\"ts\">",
      "export default defineComponent({",
      "  name: '${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}',",
      "})",
      "</script>",
      "",
      "<template>",
      "  <div>",
      "    <!-- TODO -->",
      "  </div>",
      "</template>",
      "",
      "<style lang=\"scss\" scoped>",
      "",
      "</style>",
      ""
    ],
    "description": "Vue3的 `script setup` SFC语法"
  },
  "🧊 vue3 Route For Index.vue": {
    "prefix": "vue-setup-route-index",
    "body": [
      "<route lang=\"yaml\">",
      "meta:",
      "  layout: demo",
      "  name: demo",
      "  title: demo",
      "</route>",
      "",
      "<script lang=\"ts\" setup>",
      "",
      "</script>",
      "",
      "<script lang=\"ts\">",
      "export default defineComponent({",
      "  name: '${TM_DIRECTORY}',",
      "})",
      "</script>",
      "",
      "<template>",
      "  <div>",
      "    <!-- TODO -->",
      "  </div>",
      "</template>",
      "",
      "<style lang=\"scss\" scoped>",
      "",
      "</style>",
      ""
    ],
    "description": "🎈vue3"
  },
  "🧊 vue3 Route": {
    "prefix": "vue-setup-route",
    "body": [
      "<route lang=\"yaml\">",
      "meta:",
      "  layout: demo",
      "  name: demo",
      "  title: demo",
      "</route>",
      "",
      "<script lang=\"ts\" setup>",
      "",
      "</script>",
      "",
      "<script lang=\"ts\">",
      "export default defineComponent({",
      "  name: '${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}',",
      "})",
      "</script>",
      "",
      "<template>",
      "  <div>",
      "    <!-- TODO -->",
      "  </div>",
      "</template>",
      "",
      "<style lang=\"scss\" scoped>",
      "",
      "</style>",
      ""
    ],
    "description": "🎈vue3"
  },
  "🧊 Vue3 + TSX + Components By FileName": {
    "prefix": "vue-func-f",
    "description": "函数式组件是自身没有任何状态的组件的另一种形式。它们在渲染过程中不会创建组件实例，并跳过常规的组件生命周期。",
    "body": [
      "<script lang=\"tsx\">",
      "import { FunctionalComponent } from 'vue';",
      "",
      "// 函数式组件是自身没有任何状态的组件的另一种形式。它们在渲染过程中不会创建组件实例，并跳过常规的组件生命周期。",
      "",
      "// eslint-disable-next-line @typescript-eslint/no-empty-interface",
      "interface Props {}",
      "",
      "const $TM_FILENAME_BASE: FunctionalComponent<Props, {}> = (props, context) => {",
      "  // Setup",
      "  return (",
      "    // JSX",
      "    <></>",
      "  );",
      "};",
      "",
      "$TM_FILENAME_BASE.displayName = '$TM_FILENAME_BASE';",
      "export default $TM_FILENAME_BASE;",
      "</script>"
    ]
  },
  "🥭 Pinia Store": {
    "prefix": "pinia",
    "body": [
      "import { acceptHMRUpdate, defineStore } from 'pinia'",
      "",
      "export const useUm${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Store = defineStore('um${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}', () => {",
      "",
      "}, {",
      "  // 是否放进持久化存储中",
      "  persist: !!0,",
      "})",
      "",
      "// 热更新",
      "if (import.meta.hot) {",
      "  import.meta.hot.accept(acceptHMRUpdate(useUm${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Store, import.meta.hot))",
      "}",
      ""
    ]
  },
  "🧊 Vue Component": {
    "prefix": "vue-comp",
    "description": "Vue3组件，编写公共组件时，可以使用这个代码块导出公共`props`",
    "body": [
      "<script lang=\"ts\">",
      "import { ExtractPropTypes } from 'vue';",
      "",
      "const createProps = () => ({})",
      "",
      "export type Props = ExtractPropTypes<ReturnType<typeof createProps>>",
      "export default defineComponent({",
      "  name: '${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}',",
      "  props: createProps(),",
      "  setup(props) {",
      "    return {}",
      "  }",
      "})",
      "</script>",
      "",
      "<template>",
      "  <div>",
      "    <!-- TODO -->",
      "  </div>",
      "</template>",
      "",
      "<style lang=\"scss\" scoped>",
      "",
      "</style>",
      ""
    ]
  },
  "🧊 Vue Dialog": {
    "prefix": "vue-dialog",
    "description": "Vue3组件使用`useVModel`封装的弹窗，不限定组件库",
    "scope": "vue",
    "body": [
      "<script lang=\"ts\" setup>",
      "import type { ModalProps } from 'ant-design-vue';",
      "import { useVModel } from '@vueuse/core';",
      "",
      "const props = defineProps<{",
      "  visible: boolean;",
      "  detail: string[];",
      "  modalProps?: ModalProps;",
      "}>();",
      "",
      "const { visible } = useVModel(props, 'visible');",
      "const item = computed(() => props.detail?.[0] || 'hello world');",
      "</script>",
      "",
      "<script lang=\"ts\">",
      "export default defineComponent({",
      "  name: '${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}',",
      "});",
      "</script>",
      "",
      "<template>",
      "  <AModal v-model:visible=\"visible\" v-bind=\"modalProps\">",
      "    {{ item }}",
      "  </AModal>",
      "</template>",
      "",
      "<style lang=\"scss\" scoped>",
      "//",
      "</style>",
      ""
    ]
  }
}
